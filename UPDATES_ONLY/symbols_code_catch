###   ONLY RUN THIS CODE ON AN AS NEEDED BASIS
###   THIS WILL DOWNLOAD ALL SET IMAGES THROUGH API
###   AND OVERWRITE EXISTING FILES.


import requests
import os

# Base URL
url = "https://api.pokemontcg.io/v2/sets"

# Header with API key (replace with your actual API key)
headers = {
    "X-Api-Key": "b97ddab5-5569-4912-91b7-a3a93776f78d",  # Use the appropriate key
    "Content-Type": "application/json"
}

# Make the GET request to fetch all sets
response = requests.get(url, headers=headers)

# Check the response status
if response.status_code == 200:
    # Parse JSON data
    data = response.json()

    # Extract the "symbol" URLs from the "data"
    sets = data.get("data", [])  # If the response has multiple sets, it might be a list
    

    named_symbols = [{"name": s["name"], "symbol_url": s["images"]["symbol"]} for s in sets]

    # Print extracted symbol URLs
    print("Set Symbols:", len(named_symbols))
else:
    print(f"Failed to fetch sets. Status code: {response.status_code}")
    print("Response:", response.text)


# Download the set symbols into "images\set_symbols"

# Directory to save the images
output_directory = "images\\set_symbols"

# Ensure the directory exists
os.makedirs(output_directory, exist_ok=True)

# Iterate through the named symbols and download each image
for i, symbol in enumerate(named_symbols, start=1):
    try:
        # Extract name and URL from the dictionary
        filename = f"{symbol['name']}.png"  # Add .png extension to name
        url = symbol["symbol_url"]

        # Send a GET request to fetch the image content
        response = requests.get(url, stream=True)
        if response.status_code == 200:
            # Full path to save the image
            file_path = os.path.join(output_directory, filename)

            # Write the image content to the file
            with open(file_path, "wb") as f:
                for chunk in response.iter_content(chunk_size=1024):
                    f.write(chunk)
            print(f"Downloaded: {filename} -> {file_path}")
        else:
            print(f"Failed to download {url}. HTTP status code: {response.status_code}")
    except Exception as e:
        print(f"Error downloading {symbol['name']} ({url}): {e}")











###Commented out since a DB of symbols is not yet available
# def match_set_symbol(roi_image, reference_symbols):
#     # Match the symbol using template matching
#     for symbol_name, symbol_image in reference_symbols.items():
#         res = cv2.matchTemplate(roi_image, symbol_image, cv2.TM_CCOEFF_NORMED)
#         _, max_val, _, _ = cv2.minMaxLoc(res)
#         if max_val > 0.8:  # Adjust threshold as needed
#             return symbol_name
#     return "Unknown"



# Match set symbol
# set_symbol_img = thresh[set_symbol_roi[1]:set_symbol_roi[1]+set_symbol_roi[3],
#                         set_symbol_roi[0]:set_symbol_roi[0]+set_symbol_roi[2]]
# reference_symbols = {"Base Set": cv2.imread("base_set_symbol.jpg", 0)}
# set_symbol = match_set_symbol(set_symbol_img, reference_symbols)
